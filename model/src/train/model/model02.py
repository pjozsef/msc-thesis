from src.train.model_utils import *


def create_model(conv_activation, fc_activation):
    x = tf.placeholder(tf.float32, [None, 800, 20, 1], name='x')
    fc_keep_prob = tf.placeholder(tf.float32)
    conv_keep_prob = tf.placeholder(tf.float32)

    conv1 = conv2d(x, [5, 5, 1, 16], "conv1", conv_activation, conv_keep_prob, "SAME")
    conv2 = conv2d(conv1, [3, 3, 16, 16], "conv2", conv_activation, conv_keep_prob, "SAME")
    conv3 = conv2d(conv2, [3, 3, 16, 16], "conv3", conv_activation, conv_keep_prob, "SAME")
    pool1 = maxpool(conv3, [2, 1])
    conv4 = conv2d(pool1, [3, 3, 16, 16], "conv4", conv_activation, conv_keep_prob, "SAME")
    conv5 = conv2d(conv4, [3, 3, 16, 16], "conv5", conv_activation, conv_keep_prob, "SAME")
    conv6 = conv2d(conv5, [3, 3, 16, 16], "conv6", conv_activation, conv_keep_prob, "SAME")
    pool2 = maxpool(conv6, [2, 1])
    conv7 = conv2d(pool2, [3, 3, 16, 32], "conv7", conv_activation, conv_keep_prob, "SAME")
    conv8 = conv2d(conv7, [3, 3, 32, 32], "conv8", conv_activation, conv_keep_prob, "SAME")
    conv9 = conv2d(conv8, [3, 3, 32, 32], "conv9", conv_activation, conv_keep_prob, "SAME")
    pool3 = maxpool(conv9, [2, 1])
    conv10 = conv2d(pool3, [3, 3, 32, 64], "conv10", conv_activation, conv_keep_prob, "SAME")
    conv11 = conv2d(conv10, [3, 3, 64, 64], "conv11", conv_activation, conv_keep_prob, "SAME")
    pool4 = maxpool(conv11, [2, 1])
    conv12 = conv2d(pool4, [3, 3, 64, 64], "conv12", conv_activation, conv_keep_prob, "SAME")
    conv13 = conv2d(conv12, [3, 3, 64, 64], "conv13", conv_activation, conv_keep_prob, "SAME")
    pool5 = maxpool(conv13, [2, 2])
    conv14 = conv2d(pool5, [3, 3, 64, 64], "conv14", conv_activation, conv_keep_prob, "VALID")
    conv15 = conv2d(conv14, [3, 3, 64, 64], "conv15", conv_activation, conv_keep_prob, "VALID")
    conv16 = conv2d(conv15, [3, 3, 64, 64], "conv16", conv_activation, conv_keep_prob, "VALID")
    flattened = flatten(conv16)
    fc1 = fc(flattened, [4864, 512], fc_activation, fc_keep_prob, "fc1")
    fc2 = fc(fc1, [512, 256], fc_activation, fc_keep_prob, "fc2")
    fc3 = fc(fc2, [256, 128], fc_activation, fc_keep_prob, "fc3")
    fc4 = fc(fc3, [128, 64], fc_activation, fc_keep_prob, "fc4")
    encoded = fc(fc4, [64, 32], fc_activation, fc_keep_prob, "fc5", "encoded")
    d_fc5 = decode_fc(encoded, fc_activation, "fc5")
    d_fc4 = decode_fc(d_fc5, fc_activation, "fc4")
    d_fc3 = decode_fc(d_fc4, fc_activation, "fc3")
    d_fc2 = decode_fc(d_fc3, fc_activation, "fc2")
    d_fc1 = decode_fc(d_fc2, fc_activation, "fc1")
    reshaped = tf.reshape(d_fc1, [-1, 19, 4, 64])
    d_conv16 = deconv2d(reshaped, "conv16", [tf.shape(x)[0], 21, 6, 64], conv_activation, "VALID")
    d_conv15 = deconv2d(d_conv16, "conv15", [tf.shape(x)[0], 23, 8, 64], conv_activation, "VALID")
    d_conv14 = deconv2d(d_conv15, "conv14", [tf.shape(x)[0], 25, 10, 64], conv_activation, "VALID")
    d_pool5 = upsample(d_conv14, [2, 2])
    d_conv13 = deconv2d(d_pool5, "conv13", [tf.shape(x)[0], 50, 20, 64], conv_activation, "SAME")
    d_conv12 = deconv2d(d_conv13, "conv12", [tf.shape(x)[0], 50, 20, 64], conv_activation, "SAME")
    d_pool4 = upsample(d_conv12, [2, 1])
    d_conv11 = deconv2d(d_pool4, "conv11", [tf.shape(x)[0], 100, 20, 64], conv_activation, "SAME")
    d_conv10 = deconv2d(d_conv11, "conv10", [tf.shape(x)[0], 100, 20, 32], conv_activation, "SAME")
    d_pool3 = upsample(d_conv10, [2, 1])
    d_conv9 = deconv2d(d_pool3, "conv9", [tf.shape(x)[0], 200, 20, 32], conv_activation, "SAME")
    d_conv8 = deconv2d(d_conv9, "conv8", [tf.shape(x)[0], 200, 20, 32], conv_activation, "SAME")
    d_conv7 = deconv2d(d_conv8, "conv7", [tf.shape(x)[0], 200, 20, 16], conv_activation, "SAME")
    d_pool2 = upsample(d_conv7, [2, 1])
    d_conv6 = deconv2d(d_pool2, "conv6", [tf.shape(x)[0], 400, 20, 16], conv_activation, "SAME")
    d_conv5 = deconv2d(d_conv6, "conv5", [tf.shape(x)[0], 400, 20, 16], conv_activation, "SAME")
    d_conv4 = deconv2d(d_conv5, "conv4", [tf.shape(x)[0], 400, 20, 16], conv_activation, "SAME")
    d_pool1 = upsample(d_conv4, [2, 1])
    d_conv3 = deconv2d(d_pool1, "conv3", [tf.shape(x)[0], 800, 20, 16], conv_activation, "SAME")
    d_conv2 = deconv2d(d_conv3, "conv2", [tf.shape(x)[0], 800, 20, 16], conv_activation, "SAME")
    y = deconv2d(d_conv2, "conv1", [tf.shape(x)[0], 800, 20, 1], conv_activation, "SAME")

    return x, encoded, y, conv_keep_prob, fc_keep_prob
